# -*- coding: utf-8 -*-
"""evaluate.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17nMF3Y_omxikYZeVwHF_P8ZvVnanXf_m
"""

import torch
from torch.utils.data import DataLoader
from transformers import BertTokenizer
from sklearn.metrics import accuracy_score, f1_score, classification_report
from dataset import load_data, TweetDataset
from model import COVIDTweetClassifier

def evaluate_model(model, test_loader, device):
    model.eval()
    all_preds, all_labels = [], []
    with torch.no_grad():
        for batch in test_loader:
            inputs = {k: v.to(device) for k, v in batch.items() if k != 'labels'}
            labels = batch['labels'].to(device)
            outputs = model(**inputs)
            preds = outputs.argmax(dim=1)
            all_preds.extend(preds.cpu().numpy())
            all_labels.extend(labels.cpu().numpy())

    print("Test F1 Score:", f1_score(all_labels, all_preds, average='weighted'))
    print("\nClassification Report:\n", classification_report(all_labels, all_preds))

def main_evaluation():
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    test_texts, test_features, test_labels = load_data('Corona_NLP_test.csv')
    tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')
    test_dataset = TweetDataset(test_texts, test_features, test_labels, tokenizer)
    test_loader = DataLoader(test_dataset, batch_size=64)

    model = COVIDTweetClassifier().to(device)
    state_dict = torch.load('covid_model.pth', map_location=device)
    state_dict = {k.replace('module.', ''): v for k, v in state_dict.items()}
    model.load_state_dict(state_dict)

    evaluate_model(model, test_loader, device)

if __name__ == '__main__':
    main_evaluation()